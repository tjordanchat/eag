#!/bin/pnl

	# Primitives:
	#  *  roles
	#  *  groups
	#  *  people
	#     * email - a person can have multiple email addresses.   
	#     * name.
	# web pages and users should be part of the language. So should logging in and roles.
	
	%r ADMIN "Administrator".
	%r PM "Proj Mgr".
	%p USER "User".
	%i ISSUE "Issue Id".
	%s DESC "Description".
	
	a ? USER >> PM.
	
	n ? "calling all cars" >> user.
	
	srv1 https(//company.com/func1).

	email >> /.*@company\.com/ >> add_user.

	L1: [(f1 f2 f3)(f4 f5)f6] (f1 f2).
	L2: [(f1 f2 f3) L1 (f1 f2)].

	add_user ? a & b ? ( a ? b ) | ( b ? a ) ? ... 

	srv1 https(//company.com/func1:8192).

        timeToArchive cron(23 0-23/2 1-5 * *). 

        a & b ? ( c | d ) | ( d ^ e & w ) ? f ? g. #The ^ (exclusive or) means the other token wont get gobbled

	var2 =(5*$f5-sin(f6)).

	f1 =(5+5). 
	
	f2 =(4+$var2).
	
	srv1 >> /["foo"]["bar"]["baz"] array[-1].attr[3]/j >> sr1. # /j means json-path

	a ^ b ^ c ^ d .

	layout_B: (f4 [f5 f6] [f1 f5 f6]),(f4 [f1 f5 f6]).
	layout_C: (f2 [f1 f5 f6]).

	PM ++users ++user ++releases ++issues ++issue ++pair_release_issue.

	PM ++issue_summary ++issue_description ++issue_severity ++issue_originator. 

	cpl %b "Create Project Leader" ? plname "Project Leader" %h ? PM +plname.

	cproj %b "Create Project" ? project %s "Project name" ? +users, +releases, 
			+issues, +pair_release_issue ? next.

	users %b "New user" ? users.user.
	user "User name" %h ? pusers=+user.

	releases %b "New Release" ? releases.release.
	release "Release name" %s ? r_name , r_due , +pair_release_issue .

	issues %b "New Issue" ? issues.issue_id.
	issue _id %a "Issue Id" ? issue_summary,	issue_description, issue_severity,
			issue_originator.

	pair_release_issue %b ? release_name, issue_id ? %b "Submit" ++PM ?
					release_name.issues=+issue_id.

# OR AND XOR
# is '[]' bracks for E() and '{} for A().
# E() is forEach and A() is forAll in CP-Net jargon, ie. Coloured Petri-Net.
#
# ie. [ a, b, c ] ? d(c1), e(c2), f(c3).
# forEach (ie '[]') blocks are needed because sometime a 
# process does not return.
#
# c1 c2 & c3 have to evaluate to a truth value immediately. 
# They can not be something that has to be
# wait for like a human interaction for a field or a duration of time to pass.
#
# forEach blocks can occure beyond the beginning.
# ie. [ a, b, c ] ? [ d. e ] ? f.
# 
# a project needs to be able to create a list of roles and add a 
# list of people to each role.
#
# When making a physical copy of the system while it is running and while there
# contexts for a given runtime.
# The value of all contexts and tokens have to be archivable and reloaded.

	>field3. # nulling a field value.

# comparisons will use '<' so will be small to large. ie. 5<f3<10. 
# '>' will be reserved for nulling.
#
# when setting fields, using an = sign can set triggers off
# an association, can not.

  project_adder ++add_users +-pname +-pdesc -+ppri +-pmgr ++create_project.
  project_adder +admin.

	project ? project_owner ++issue.
	a ? *project.*issue(type~"feature"&'max(age+service)' & mgr ~ 'true').next. 
	projects.issues(issue_type.2&issue_owner~myguys&10000<dept_id&var22<5)?v.
	PM +cproj.
	project.p_name ~ /_X_/ ? issues.owner ~ /jbob/ ? loop1.
	func1 ? *project.*issues.i_owner ~ /^%(var_from_name3)$/ ? i_owner  var_to_name3.
	*project.*issues.i_owner ~ /^jtj/ ? +i_owner  PM.
	*project.*issues.last_activity > @5d ? i_owner? notify.
	project_id  0.
	pname %s "Project Name". 
	pmgr  "Project Manager". 
	PM --f4 ++pname +-create_project.
	admin ++add_uses ++add_project_mgr.
	create_project   %b   "Create Project".
	add_project_mgr   %b   "Add Project Manager".
	l_name  "List of Projects". 


	r1 ++f1 +-f2 --pname.
	r2 +-f3 ++f5. 
  pmgr  ++add_users ++pname ++pdesc ++ppri.
	choose_floor_buttons  ++floor1_but ++floor2_but ++floor3_but.
	johnc john@home.com ++customer_reason "John Cusack".
	date1 %t "Date".
	f1 %d "Dollar Amount".
	c %h "Customer Name".
	pmgr  c.
	Fixed   %b   "Fixed".
	add_users   %b   "Add User".
	create_issue   %b   "Create Issue".
  button1_pushed   %b   "Button 1".
	hello_world   "Hello world".
	comment   %30s   "Add Comment" (comments=+comment?comment=).
	comments "Previous Comments" [].
	tstrslt  l1 "Test Results". 
	l1  [ "accept" "reject" "abstain" ] (env=qa?adv_issue).
	l2  [ "Gathering Information" "Reject" ].
	l3  [ "Bug" "Feature" "Enhancement" ].
	issue_id  0.
	holiday_days @Dec25 @Jul4 @Feb2.
	timer1  @5m12s.
	ticks  @4a.
	secondtuesecmonth  @2M2tue.
	xmas  @Dec25.

	[ a, b, c ] ? d(c1), e(c2), f(c3).

	release.env ~ qa ? mailinfo.to=qa_lead, mailinfo.msg="please test %(env)"?.
	
	@now ? +a1, a.
	R1 ? a ? b ? c.
	pm_mail PM "A new issue of Severity 1 arrives #%(issue_id)".
	b?@5m? PM +owner.

# A list of people is a role.
# people have email addresses.
# states and fields may contain tokens.
# roles also contain a list of field rights.
# a role may have a description string.
# email has message, subject, and a role and a label.
#

 PM("You have been assigned %(issue_id)..."). # ie. Using a role like a function 

# indicates an sending an email.
#
# <<
	a,b ? pass(f3.1), fail(f3.2), abstain(f3.3).
	a,E(b1,b2),c?d,e? w, x.
	A(d,e) ? e(f1<4), c(4<f1). 
	E(e,b,c) ? d(4<f1), e(f1<4). 
	E(d,e) ? ( @12am ? p ), f(f6~2). 
	a, b ? 'f1++', f26, 'f5=(f2/f4)' , next.


